package com.home.service.controller;

import com.home.service.model.Role;
import com.home.service.model.User;
import com.home.service.repository.UserRepository;
import com.home.service.repository.ReviewRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/api/service-providers")
//@CrossOrigin(origins = "http://localhost:5173")
public class ServiceProviderController {

    @Autowired
    private UserRepository userRepository;
    
    @Autowired
    private ReviewRepository reviewRepository;

    // ✅ Existing API: Fetch service providers by service type
    @GetMapping("/{serviceType}")
    public List<User> getServiceProviders(@PathVariable String serviceType) {
        return userRepository.findByRoleAndServiceType(Role.SERVICE_PROVIDER, serviceType);
    }

    // ✅ New API: Fetch service provider details by ID
    @GetMapping("/details/{id}")
    public ResponseEntity<User> getProviderDetails(@PathVariable Long id) {
        Optional<User> provider = userRepository.findById(id);

        if (provider.isPresent()) {
            return ResponseEntity.ok(provider.get());
        } else {
            return ResponseEntity.status(404).body(null); // Return 404 if provider not found
        }
    }
    
    
    @GetMapping("/list")
    public ResponseEntity<List<ServiceProviderResponse>> getAllServiceProviders() {
        List<User> providers = userRepository.findAllServiceProviders();

        List<ServiceProviderResponse> response = providers.stream().map(provider -> {
            double avgRating = reviewRepository.findAverageRatingByProviderId(provider.getId()).orElse(0.0);
            return new ServiceProviderResponse(provider.getId(), provider.getName(), provider.getServiceType(), avgRating);
        }).collect(Collectors.toList());

        return ResponseEntity.ok(response);
    }
    
    
    
}



//✅ DTO (Data Transfer Object) for Response
class ServiceProviderResponse {
 public Long id;
 public String name;
 public String serviceType;
 public double avgRating;

 public ServiceProviderResponse(Long id, String name, String serviceType, double avgRating) {
     this.id = id;
     this.name = name;
     this.serviceType = serviceType;
     this.avgRating = avgRating;
 }
}
